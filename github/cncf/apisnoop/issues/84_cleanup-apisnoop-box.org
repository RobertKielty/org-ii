#+TITLE: #84: Cleanup Apisnoop Box
#+AUTHOR: Zach Mandeville
#+AUTHOR: Hippie Hacker
#+EMAIL: zz@ii.coop
#+EMAIL: hh@ii.coop
#+DATE: 30th of January, 2019
#+CREATOR: ii.coop
#+PROPERTY: header-args:shell :results output code verbatim replace
#+PROPERTY: header-args:shell+ :dir (symbol-value 'tmpdir)
#+PROPERTY: header-args:tmate  :socket (symbol-value 'socket)
#+PROPERTY: header-args:tmate+ :session (concat (user-login-name) ":" (nth 4 (org-heading-components)))
#+STARTUP: showeverything

* Our Issue
[[https://github.com/cncf/apisnoop/issues/84][Link to github]]
#+NAME: Issue Description
#+BEGIN_EXAMPLE
GIVEN That apisnoop developers want to be able to easily reason about our file structure and data flow
WHEN a developer ssh's into the apisnoop server
THEN they see a well-organized set of relevant files and nothing else
AND can easily reason about both the code and its infrastructure
#+END_EXAMPLE

We realized that, instead of cleaning up the existing box, it would be more productive to create a new box from scratch, so the box only contains exactly what we need.  We could then maybe make this the new default structure for the apisnoop repo, with everything else in a different 'exploratory' repo.

* Setup Right Eye
* middle
:PROPERTIES:
:header-args:tmate+: :socket (concat socket ".middle")
:END:

#+BEGIN_SRC tmate
ls
#+END_SRC

* FOO
:PROPERTIES:
:header-args:tmate+: :socket (concat socket ".right")
:END:

#+BEGIN_SRC tmate
ls
#+END_SRC
** subthings
#+BEGIN_SRC

#+END_SRC
* Set Your Right Eye
  socket:  apisnoopfuntime
  name: zz-right
  
  now type =C-x C-e=
  you are now ready to run the commands on the remote box.
* remtoe sample
  #+BEGIN_SRC tmate
 pwd 
  #+END_SRC
* In Org Folder
:PROPERTIES:
:header-args:shell+: :dir (symbol-value 'org-file-dir)
:header-args:tmate+: :prologue (concat "cd " org-file-dir "\n") 
:END:

** shell

#+BEGIN_SRC shell
pwd
#+END_SRC

** tmate

#+BEGIN_SRC tmate :noweb yes
pwd
#+END_SRC

* In Temp Folder
:PROPERTIES:
:header-args:shell+: :dir (symbol-value 'tmpdir)
:header-args:tmate+: :prologue (concat "cd " tmpdir "\n") 
:END:

#+BEGIN_SRC shell
pwd
#+END_SRC

#+RESULTS:
#+BEGIN_SRC shell
/dev/shm/hh.template-8geaSN
#+END_SRC

#+RESULTS:
#+BEGIN_SRC shell
#+END_SRC

#+BEGIN_SRC tmate
pwd
#+END_SRC

* Footer
org-file-dir is the directory this file exists in
user-buffer is $USER.$FILENAME without .org ie. hh.filenamebase
socket is /tmp/$USER.$FILENAMEBASE.ii.socket
we copy the tmate command to clipboard and primary
tmpdir creates folder in the ramdisk on load
:async yes to enable async execution
As soon as you load this file, create a new terminal and paste to create target tmate session
# Local Variables:
# eval: (set (make-local-variable 'org-file-dir) (file-name-directory buffer-file-name))
# eval: (set (make-local-variable 'user-buffer) (concat user-login-name "." (file-name-base buffer-file-name)))
# eval: (set (make-local-variable 'tmpdir) (make-temp-file (concat "/dev/shm/" user-buffer "-") t))
# eval: (set (make-local-variable 'socket) (concat "/tmp/" user-buffer ".iisocket"))
# eval: (set (make-local-variable 'select-enable-clipboard) t)
# eval: (set (make-local-variable 'select-enable-primary) t)
# eval: (set (make-local-variable 'start-ssh-command) (concat "ssh -L " socket ":" socket))
# eval: (set (make-local-variable 'start-tmate-command) (concat "tmate -S " socket " new-session -s " user-login-name " -n main \"tmate wait tmate-ready && tmate display -p '#{tmate_ssh}' | xclip -i -sel p -f | xclip -i -sel c; bash --login\""))
# eval: (xclip-mode 1) 
# eval: (gui-select-text start-ssh-command)
# eval: (gui-select-text start-tmate-command)
# org-babel-tmate-session-prefix: ""
# org-babel-tmate-default-window-name: "main"
# org-confirm-babel-evaluate: nil
# org-use-property-inheritance: t
# End:
