# -*- org-use-property-inheritance: t; -*-
#+TITLE: Setting up gitlab from scratch
#+AUTHOR: Hippie Hacker
#+EMAIL: hh@ii.coop
#+CREATOR: ii.coop
#+DATE: 20th of February, 2019
#+PROPERTY: header-args:shell :results output code verbatim replace
#+PROPERTY: header-args:shell+ :prologue ". /etc/profile.d/homedir-go-path.sh\n. /etc/profile.d/system-go-path.sh\nexec 2>&1\n"
#+PROPERTY: header-args:shell+ :epilogue ":\n"
#+PROPERTY: header-args:shell+ :wrap "EXAMPLE :noeval t"
#+PROPERTY: header-args:shell+ :dir "/ssh:root@139.178.88.146:/root/"
#+PROPERTY: header-args:shell+ :eval no-export
#+PROPERTY: header-args:tmate  :socket (symbol-value 'socket)
#+PROPERTY: header-args:tmate+ :session (concat (user-login-name) ":" (nth 4 (org-heading-components)))
#+NOPROPERTY: header-args:tmate+ :prologue (concat "cd " org-file-dir "\n")
#+PROPERTY: header-args:tmate+ :eval no-export
#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/
#+STARTUP: showeverything

* TLDR

Type , b s to evaluate this subtree:
 TODO fix this
Error: release gitlab failed:
Deployment.apps "gitlab-sidekiq-all-in-1"
 is invalid:
 [spec.template.spec.volumes[2].projected.sources[6].secret.name: Required value,
  spec.template.spec.volumes[2].projected.sources[7].secret.name: Required value,
  spec.template.spec.initContainers[1].volumeMounts[1].name: Not found: "init-sidekiq-secrets"]
** tangle

:PROPERTIES:
:header-args:shell+: :dir "."
:END:

#+NAME: write remote config files
#+BEGIN_SRC elisp :results none
(org-babel-tangle)
#+END_SRC
[[/ssh:root@139.178.88.146:/root/recode.ii.nz.yaml]]

#+NAME: deploy gitlab
#+BEGIN_SRC tmate :noweb yes
  <<Deploy Gitlab on Kubernetes>>
#+END_SRC
**  helm dump
#+BEGIN_SRC tmate
helm get manifest gitlab > helm-gitlab-manifests.yaml
helm get values gitlab > helm-gitlab-values.yaml
#+END_SRC

:NOTES:
helm get gitlab manifests is the wrong order
:END:

[[/ssh:root@139.178.88.146:/root/helm-gitlab-manifests.yaml]]
[[/ssh:root@139.178.88.146:/root/helm-gitlab-values.yaml]]

* TLDR undo
#+NAME: Delete Gitlab Fully
#+BEGIN_SRC tmate
helm delete --purge gitlab && kubectl delete namespace gitlab
#+END_SRC

* Preparing to use the Gitlab Chart

We found some decent documentation over 

https://gitlab.com/charts/gitlab/blob/master/doc/installation/README.md
** find my_ip
#+NAME: my_ip
#+BEGIN_SRC shell
curl -4 https://ifconfig.co
#+END_SRC

#+RESULTS: my_ip
#+BEGIN_EXAMPLE :noeval t
139.178.88.146
#+END_EXAMPLE
* Deploy Using the Gitlab Chart
  
** Get Chart for gitlab

#+NAME: Get Chart for gitlab
#+BEGIN_SRC tmate
helm repo add gitlab https://charts.gitlab.io/
helm repo update
#+END_SRC
** Getting our secrets
:PROPERTIES:
:header-args:shell+: :dir "."
:END:


IN this section, we setup a secrets.env that looks similar to this:

#+NAME: secrets.env
#+BEGIN_SRC shell :noeval
SMTP_USER_NAME="postmaster@recode.ii.nz"
SMTP_PASSWORD="apassword"
OMNIAUTH_GITHUB_APP_ID=dexxxxxxxxxxxxxxxx888a
OMNIAUTH_GITHUB_APP_SECRET=27exxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx814
OMNIAUTH_GOOGLE_APP_ID=75xxxxxxx011-mo0xxxxxxxxxxxxxxxxxxv77vo.apps.googleusercontent.com
OMNIAUTH_GOOGLE_APP_SECRET=gcPxxxxxxxxxxxxxoJaOM
#+END_SRC

*** User Name for SMTP

We use mailgun for now, until there is a smtp.ii.nz

#+NAME: smtp_user_name
#+BEGIN_SRC shell :results output silent
. secrets.env ; echo -n $SMTP_USER_NAME
#+END_SRC

#+NAME: smtp_password
#+BEGIN_SRC shell :results output silent
. secrets.env ; echo -n $SMTP_PASSWORD
#+END_SRC

*** Github Oauth
#+NAME: omniauth_github_app_id
#+BEGIN_SRC shell :results output silent
. secrets.env ; echo -n $OMNIAUTH_GITHUB_APP_ID
#+END_SRC

#+NAME: omniauth_github_app_secret
#+BEGIN_SRC shell :results output silent
. secrets.env ; echo -n $OMNIAUTH_GITHUB_APP_SECRET
#+END_SRC

*** Google Oauth
#+NAME: omniauth_google_app_id
#+BEGIN_SRC shell :results output silent
. secrets.env ; echo -n $OMNIAUTH_GOOGLE_APP_ID
#+END_SRC

#+NAME: omniauth_google_app_secret
#+BEGIN_SRC shell :results output silent
. secrets.env ; echo -n $OMNIAUTH_GOOGLE_APP_SECRET
#+END_SRC


** Configure the Chart

#+NAME: tramp link to recode.ii.nz.yaml
#+BEGIN_SRC elisp :results raw
(concat "[[/ssh:" ssh-user-host ":/root/recode.ii.nz.yaml]]")
#+END_SRC

#+RESULTS: tramp link to recode.ii.nz.yaml
[[/ssh:root@139.178.88.146:/root/recode.ii.nz.yaml]]
[[http://localhost:8001/api/v1/namespaces/gitlab/services/https:gitlab-nginx-ingress-controller:/]]


*** Services
[[https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service]]
[[https://gitlab.com/charts/gitlab/blob/master/charts/nginx/templates/controller-service.yaml]]
controller.service.nodePorts.http
controller.service.nodePorts.https
Our chart has some very nice documentation:
[[https://gitlab.com/charts/gitlab/blob/master/doc/installation/command-line-options.md]]

#+BEGIN_SRC shell :dir "." 
  curl -s https://gitlab.com/charts/gitlab/raw/master/doc/installation/command-line-options.md | grep \\-ee
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE :noeval t
| gitlab.sidekiq.image.repository                     | Sidekiq image repository                       | registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ee |
| gitlab.unicorn.image.repository                     | Unicorn image repository                       | registry.gitlab.com/gitlab-org/build/cng/gitlab-unicorn-ee |
| gitlab.unicorn.workhorse.image                      | Workhorse image repository                     | registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ee |
| gitlab.migrations.image.repository                  | Migrations image repository                    | registry.gitlab.com/gitlab-org/build/cng/gitlab-rails-ee   |
#+END_EXAMPLE

* TODO set valid rang
#+BEGIN_SRC error
Error: release gitlab failed: Service "gitlab-nginx-ingress-controller" is invalid: spec.ports[0].nodePort:
Invalid value: 80: provided port is not in the valid range. The range of valid ports is 30000-32767
#+END_SRC

#+NAME: The Config
#+BEGIN_SRC yaml :noweb yes :tangle (concat "/ssh:" ssh-user-host ":recode.ii.nz.yaml")
  # https://gitlab.com/charts/gitlab/blob/master/doc/installation/command-line-options.md#advanced-nginx-ingress-configuration
  # https://gitlab.com/charts/gitlab/blob/master/charts/nginx/index.md#configuration
  # we have multiple IPs on the single box packet master
  # https://gitlab.com/charts/gitlab/blob/master/values.yaml

  ## doc/charts/nginx/index.md
  ## doc/architecture/decisions.md#nginx-ingress
  ## Installation & configuration of charts/nginx
  nginx-ingress:
    controller:
      # hostNetwork: true #?
      clusterIP: 139.178.88.148 
      minAvailable: 1
      daemonset:
        hostPorts:
          http: 80
          https: 443
        useHostPort: false
      service:
        clusterIP: ""
        loadBalancerIP: ""
        externalIPs: ["139.178.88.148"]
        externalTrafficPolicy: Local
        healthCheckNodePort: 0
        nodePorts:
          http: "80"
          https: "443"
        targetPorts:
          http: http
          https: https
        type: NodePort
  # Global chart properties
  global:
    hosts:
      #externalIP: 139.178.88.148 
      #loadBalancerIP: 139.178.88.148 
      domain: recode.ii.nz
    ## doc/charts/globals.md#configure-appconfig-settings
    ## Rails based portions of this chart share many settings
    appConfig:
      ## doc/charts/globals.md#general-application-settings
      enableUsagePing: true
      enableImpersonation: true
      defaultCanCreateGroup: true
      usernameChangingEnabled: true
      issueClosingPattern:
      defaultTheme:
      defaultProjectsFeatures:
        issues: true
        mergeRequests: true
        wiki: true
        snippets: true
        builds: true

      ## doc/charts/globals.md#incoming-email-settings
      ## doc/installation/deployment.md#incoming-email
      # incomingEmail:
      #   enabled: true
      #   address: ""
      #   host: "imap.gmail.com"
      #   port: 993
      #   ssl: true
      #   startTls: false
      #   user: ""
      #   password:
      #     secret: ""
      #     key: password
      #   mailbox: inbox
      #   idleTimeout: 60

      omniauth:
        enabled: true
        autoSignInWithProvider: 
        allowSingleSignOn: ['github', 'google_oauth2']
        blockAutoCreatedUsers: false
        providers:
          - key: 'github'
            app_id: "<<omniauth_github_app_id()>>"
            app_secret: "<<omniauth_github_app_secret()>>"
          - key: 'google_oauth2'
            app_id: "<<omniauth_google_app_id()>>"
            app_secret: "<<omniauth_google_app_secret()>>"
        syncProfileAttributes: ['email']
      # Outgoing email server settings
      # smtp:
      #   enabled: true
      #   address: smtp.mailgun.org
      #   port: 2525
      #   user_name: "<<smtp_user_name()>>"
      #   password:
      #     secret: "smtp_password"
      #     key: "<<smtp_password()>>"
      #   domain: recode.ii.nz
      #   authentication: "plain"
      #   starttls_auto: false
      #   openssl_verify_mode: "peer"
      # Email persona used in email sent by GitLab
      # application:
      #   create: true
      email:
        from: 'gitlab@recode.ii.nz'
        display_name: GitLab@recode.ii.nz
        reply_to: 'hh@ii.coop'
        subject_suffix: ' | ii.nz'
      time_zone: Pacific/Auckland
    # We set email timout to 600 at some point
    #  timeout: 600
  certmanager-issuer:
    email: recode@ii.nz
  gitlab:
    sidekiq:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ce
    unicorn:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-unicorn-ce
      workhorse:
        image: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ce
    migrations:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-rails-ce
#+END_SRC

** Verify cluster

We could run other commands, but this is enough for now.

#+NAME: Verify Cluster
#+BEGIN_SRC shell :results code
kubectl get pods --all-namespaces
#+END_SRC

#+RESULTS: Verify Cluster
#+BEGIN_EXAMPLE :noeval t
NAMESPACE     NAME                                    READY   STATUS    RESTARTS   AGE
kube-system   coredns-86c58d9df4-7cpms                1/1     Running   0          86m
kube-system   coredns-86c58d9df4-vpbrt                1/1     Running   0          86m
kube-system   etcd-ci.ii.coop                         1/1     Running   0          85m
kube-system   hostpath-provisioner-7b79cb99f7-mb6dr   1/1     Running   0          82m
kube-system   kube-apiserver-ci.ii.coop               1/1     Running   0          85m
kube-system   kube-controller-manager-ci.ii.coop      1/1     Running   0          85m
kube-system   kube-flannel-ds-amd64-cx4sz             1/1     Running   0          83m
kube-system   kube-proxy-m4w5g                        1/1     Running   0          86m
kube-system   kube-scheduler-ci.ii.coop               1/1     Running   0          85m
kube-system   kubernetes-dashboard-57df4db6b-pw6tl    1/1     Running   0          81m
kube-system   tiller-deploy-dbb85cb99-f84vr           1/1     Running   0          82m
#+END_EXAMPLE

** Deploy Gitlab on Kubernetes 
#+NAME: Deploy Gitlab on Kubernetes
#+BEGIN_SRC tmate
helm upgrade --namespace=gitlab --install gitlab gitlab/gitlab --values ~/recode.ii.nz.yaml
MINIO_PVC=$(kubectl get pvc --namespace=gitlab gitlab-minio -o jsonpath='{.spec.volumeName}')
chown 1000.1000 /volumes/$MINIO_PVC
REDIS_PVC=$(kubectl get pvc --namespace=gitlab gitlab-redis -o jsonpath='{.spec.volumeName}')
chown -R 999.999 /volumes/$REDIS_PVC
#gitaly / repo-data takes a while to be created
REPO_PVC=$(kubectl get pvc --namespace=gitlab repo-data-gitlab-gitaly-0 -o jsonpath='{.spec.volumeName}')
echo $REPO_PVC
#chown 1000.1000 /volumes/$REPO_PVC
#+END_SRC

#+NAME: Delete Gitlab Fully
#+BEGIN_SRC tmate
helm delete --purge gitlab && kubectl delete namespace gitlab
#+END_SRC

* Monitor the Progress of your gitlab installation
** monitor
#+NAME: ingress IP and ports
#+BEGIN_SRC shell
kubectl get service --namespace gitlab gitlab-nginx-ingress-controller
#+END_SRC

#+RESULTS: ingress IP and ports
#+BEGIN_EXAMPLE :noeval t
NAME                              TYPE       CLUSTER-IP       EXTERNAL-IP      PORT(S)                             AGE
gitlab-nginx-ingress-controller   NodePort   10.110.226.218   139.178.88.148   80:80/TCP,443:443/TCP,22:1819/TCP   90s
#+END_EXAMPLE

** See how the run
** pods   
#+NAME: pods
#+BEGIN_SRC tmate
watch kubectl get pods --namespace=gitlab
#+END_SRC

#+NAME: ingresses
#+BEGIN_SRC shell
kubectl get ingresses --namespace=gitlab
#+END_SRC

#+RESULTS: ingresses
#+BEGIN_EXAMPLE :noeval t
NAME                        HOSTS                   ADDRESS          PORTS     AGE
cm-acme-http-solver-km7gb   gitlab.recode.ii.nz     139.178.88.148   80        6m21s
cm-acme-http-solver-mflf2   minio.recode.ii.nz      139.178.88.148   80        6m21s
cm-acme-http-solver-tw5zg   registry.recode.ii.nz   139.178.88.148   80        6m21s
gitlab-minio                minio.recode.ii.nz      139.178.88.148   80, 443   6m30s
gitlab-registry             registry.recode.ii.nz   139.178.88.148   80, 443   6m30s
gitlab-unicorn              gitlab.recode.ii.nz     139.178.88.148   80, 443   6m30s
#+END_EXAMPLE

#+NAME: services
#+BEGIN_SRC shell
kubectl get services --namespace=gitlab
#+END_SRC

#+RESULTS: services
#+BEGIN_EXAMPLE :noeval t
NAME                                      TYPE        CLUSTER-IP       EXTERNAL-IP      PORT(S)                             AGE
cm-acme-http-solver-5f6b5                 NodePort    10.102.109.23    <none>           8089:3392/TCP                       6m51s
cm-acme-http-solver-64gxg                 NodePort    10.101.202.118   <none>           8089:4835/TCP                       6m51s
cm-acme-http-solver-jlhvq                 NodePort    10.99.36.51      <none>           8089:5329/TCP                       6m51s
gitlab-gitaly                             ClusterIP   None             <none>           8075/TCP,9236/TCP                   7m2s
gitlab-gitlab-shell                       ClusterIP   10.106.254.236   <none>           22/TCP                              7m2s
gitlab-minio-svc                          ClusterIP   10.100.31.15     <none>           9000/TCP                            7m2s
gitlab-nginx-ingress-controller           NodePort    10.104.25.12     139.178.88.148   80:80/TCP,443:443/TCP,22:9166/TCP   7m2s
gitlab-nginx-ingress-controller-metrics   ClusterIP   10.109.168.214   <none>           9913/TCP                            7m2s
gitlab-nginx-ingress-controller-stats     ClusterIP   10.110.103.9     <none>           18080/TCP                           7m2s
gitlab-nginx-ingress-default-backend      ClusterIP   10.102.151.3     <none>           80/TCP                              7m2s
gitlab-postgresql                         ClusterIP   10.97.118.220    <none>           5432/TCP                            7m2s
gitlab-prometheus-server                  ClusterIP   10.97.122.130    <none>           80/TCP                              7m2s
gitlab-redis                              ClusterIP   10.101.93.233    <none>           6379/TCP,9121/TCP                   7m2s
gitlab-registry                           ClusterIP   10.101.172.24    <none>           5000/TCP                            7m2s
gitlab-unicorn                            ClusterIP   10.98.201.112    <none>           8080/TCP,8181/TCP                   7m2s
#+END_EXAMPLE

#+NAME: External NodePort
#+BEGIN_SRC shell :wrap "SRC json"
kubectl get services gitlab-nginx-ingress-controller --namespace=gitlab -o json \
  | jq -M .spec
#+END_SRC

First time around we notices that SSH was likely listening on all ports, so we weren't given port 22.
So we went back and configured SSH to only listen on the first IP.

#+RESULTS: External NodePort
#+BEGIN_SRC json
{
  "clusterIP": "10.101.230.167",
  "externalIPs": [
    "139.178.88.148"
  ],
  "externalTrafficPolicy": "Local",
  "ports": [
    {
      "name": "http",
      "nodePort": 80,
      "port": 80,
      "protocol": "TCP",
      "targetPort": "http"
    },
    {
      "name": "https",
      "nodePort": 443,
      "port": 443,
      "protocol": "TCP",
      "targetPort": "https"
    },
    {
      "name": "gitlab-shell",
      "nodePort": 6519,
      "port": 22,
      "protocol": "TCP",
      "targetPort": "gitlab-shell"
    }
  ],
  "selector": {
    "app": "nginx-ingress",
    "component": "controller",
    "release": "gitlab"
  },
  "sessionAffinity": "None",
  "type": "NodePort"
}
#+END_SRC

#+NAME: nginx-ingress-tcp configmap
#+BEGIN_SRC shell :wrap "SRC json"
kubectl get configmaps gitlab-nginx-ingress-tcp --namespace=gitlab -o json \
  | jq -M .data
#+END_SRC

#+RESULTS: nginx-ingress-tcp configmap
#+BEGIN_SRC json
{
  "22": "gitlab/gitlab-gitlab-shell:22"
}
#+END_SRC
* Redis Permissions

Some how /data/redis is created as root when redis loads.
We need to set the permissions for the volume (/data) and the /data/redis as it's created as owner root.

#+NAME: redis logs
#+BEGIN_SRC shell
kubectl logs --namespace=gitlab gitlab-redis-7577d89db9-f77t6  -c redis | tail -4
#+END_SRC  

#+RESULTS: redis logs
#+BEGIN_EXAMPLE :noeval t
1:M 22 Feb 09:45:05.021 * 10 changes in 300 seconds. Saving...
1:M 22 Feb 09:45:05.022 * Background saving started by pid 154
154:C 22 Feb 09:45:05.022 # Failed opening the RDB file gitlab-redis.rdb (in server root dir /data/redis) for saving: Permission denied
1:M 22 Feb 09:45:05.122 # Background saving error
#+END_EXAMPLE

#+NAME: redis run as uid
#+BEGIN_SRC shell
kubectl exec -ti --namespace=gitlab gitlab-redis-7577d89db9-f77t6  -c redis id
#+END_SRC

#+RESULTS: redis run as uid
#+BEGIN_EXAMPLE :noeval t
Unable to use a TTY - input is not a terminal or the right kind of file
uid=999(redis) gid=999(redis) groups=999(redis)
#+END_EXAMPLE

#+BEGIN_SRC tmate
REDIS_PVC=$(kubectl get pvc --namespace=gitlab gitlab-redis -o jsonpath='{.spec.volumeName}')
chown -R 999.999 /volumes/$REDIS_PVC
#+END_SRC
* pvc repo-data-gitlab-gitaly-0

#+BEGIN_SRC shell
REPO_PVC=$(kubectl get pvc --namespace=gitlab repo-data-gitlab-gitaly-0 -o jsonpath='{.spec.volumeName}')
ls -la /volumes/$REPO_PVC
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE :noeval t
total 12
drwxrwxrwx 3  999  999 4096 Feb 22 10:06 .
drwxr-xr-x 8  999  999 4096 Feb 22 09:25 ..
drwxr-x--- 4 1000 1000 4096 Feb 22 10:06 root
#+END_EXAMPLE

#+BEGIN_SRC tmate
REDIS_PVC=$(kubectl get pvc --namespace=gitlab gitlab-redis -o jsonpath='{.spec.volumeName}')
chown -R 1000.1000 /volumes/$REDIS_PVC
#+END_SRC

* Minio Permissions
If minio is working, it will not have any output, but we've been finding it complains that it can't write to .minio.sys.
We also noted that when we set perms on it's volume to 777, .minio.sys is written as uid 1000.
There is likely an issue with minio needing to set the perms on the volume / folder before starting.

#+NAME: inspect minio logs
#+BEGIN_SRC shell
kubectl logs --namespace=gitlab pod/`kubectl get pod -l app=minio -l component=app -o jsonpath='{..metadata.name}' --all-namespaces` -c minio
#+END_SRC

#+RESULTS: inspect minio logs
#+BEGIN_EXAMPLE :noeval t
time="2019-02-22T08:57:23Z" level=error msg="Initializing object layer failed" cause="Unable to initialize '.minio.sys' meta volume, mkdir /export/.minio.sys: permission denied" source="[server-main.go:214:serverMain()]" 
#+END_EXAMPLE

#+NAME: describe minio pod/container
#+BEGIN_SRC shell :wrap "SRC config" :eval ask
kubectl describe pod/`kubectl get pod -l app=minio -l component=app -o jsonpath='{..metadata.name}' --all-namespaces` --namespace=gitlab
#+END_SRC

#+BEGIN_SRC tmate
MINIO_PVC=$(kubectl get pvc --namespace=gitlab gitlab-minio -o jsonpath='{.spec.volumeName}')
chown 1000.1000 /volumes/$MINIO_PVC
#+END_SRC

Delete pod (so it can be re-created and can re-used the PVC that now has correct perms:

#+BEGIN_SRC tmate
kubectl delete $(kubectl get pod --namespace=gitlab -l app=minio -o name) --namespace=gitlab
#+END_SRC

#+BEGIN_SRC shell
MINIO_PVC=$(kubectl get pvc --namespace=gitlab gitlab-minio -o jsonpath='{.spec.volumeName}')
ls -la /volumes/$MINIO_PVC
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE :noeval t
total 8
drwxr-xr-x 2 1000 1000 4096 Feb 21 17:35 .
drwxr-xr-x 9 root root 4096 Feb 21 17:35 ..
#+END_EXAMPLE

** Get root password

#+NAME: get root password
#+BEGIN_SRC shell
kubectl get secret --namespace=gitlab gitlab-gitlab-initial-root-password -ojsonpath={.data.password} | base64 --decode ; echo
#+END_SRC

#+RESULTS: get root password
#+BEGIN_EXAMPLE :noeval t
#+END_EXAMPLE

** TODO email
** TODO SMTP OUTGOING
* TODO ingress
for our new IP on 22,80,443
  
* Init Conainer Debug

  #+NAME: sidekiq pod
  #+BEGIN_SRC shell :wrap "SRC json"
  kubectl get pod \
    -l app=sidekiq \
    --namespace=gitlab \
    -o json \
  | jq -M .
  #+END_SRC

** Debug Init containers
https://kubernetes.io/docs/tasks/debug-application-cluster/debug-init-containers/
#+NAME: describe broken pod
#+BEGIN_SRC shell
kubectl describe `kubectl get pod -l app=sidekiq --namespace=gitlab -o name` --namespace=gitlab
#+END_SRC

#+RESULTS: describe broken pod
#+BEGIN_EXAMPLE :noeval t
Name:               gitlab-sidekiq-all-in-1-64c87c795b-wrx22
Namespace:          gitlab
Priority:           0
PriorityClassName:  <none>
Node:               ci.ii.coop/139.178.88.146
Start Time:         Thu, 21 Feb 2019 15:38:24 +1300
Labels:             app=sidekiq
                    pod-template-hash=64c87c795b
                    release=gitlab
Annotations:        checksum/configmap: d60eb12282fc9d74a04175ae12359ebd94a522ade74cef0053dfc601116849d3
                    checksum/configmap-pod: 31b99a4a71c3ab443a22b879ad69dfa437edf33f8292b0ae3835c02cbf1047ea
                    cluster-autoscaler.kubernetes.io/safe-to-evict: true
                    prometheus.io/port: 3807
                    prometheus.io/scrape: true
Status:             Pending
IP:                 10.244.0.209
Controlled By:      ReplicaSet/gitlab-sidekiq-all-in-1-64c87c795b
Init Containers:
  certificates:
    Container ID:   docker://4a74cf95f171347de42433cb2dab7527995aa1e328172bcea405f1e6ec75ff5b
    Image:          registry.gitlab.com/gitlab-org/build/cng/alpine-certificates:20171114-r3
    Image ID:       docker-pullable://registry.gitlab.com/gitlab-org/build/cng/alpine-certificates@sha256:bf07c7b34ef86f22370e5a3e0e2a0f7e51a24e0ad6c27108cae59c64e244e2c3
    Port:           <none>
    Host Port:      <none>
    State:          Terminated
      Reason:       Completed
      Exit Code:    0
      Started:      Thu, 21 Feb 2019 15:38:28 +1300
      Finished:     Thu, 21 Feb 2019 15:38:28 +1300
    Ready:          True
    Restart Count:  0
    Requests:
      cpu:        50m
    Environment:  <none>
    Mounts:
      /etc/ssl/certs from etc-ssl-certs (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-tfwcn (ro)
  configure:
    Container ID:  docker://d79546e8f95b925f86a81b288fc8541af440a39af5cb8a79864de38121198827
    Image:         busybox:latest
    Image ID:      docker-pullable://busybox@sha256:061ca9704a714ee3e8b80523ec720c64f6209ad3f97c0ff7cb9ec7d19f15149f
    Port:          <none>
    Host Port:     <none>
    Command:
      sh
      /config/configure
    State:          Terminated
      Reason:       Completed
      Exit Code:    0
      Started:      Thu, 21 Feb 2019 15:38:30 +1300
      Finished:     Thu, 21 Feb 2019 15:38:30 +1300
    Ready:          True
    Restart Count:  0
    Requests:
      cpu:        50m
    Environment:  <none>
    Mounts:
      /config from sidekiq-config (ro)
      /init-secrets from init-sidekiq-secrets (ro)
      /sidekiq-secrets from sidekiq-secrets (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-tfwcn (ro)
  dependencies:
    Container ID:  docker://bb2d3af29db91640865de5572a7cb92eb5215ba6736f384d41aa708508fafc0e
    Image:         registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ce:v11.7.5
    Image ID:      docker-pullable://registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ce@sha256:df2c7329c885f002a1e941e08838736e6714829d80460eb59c05f9b4066e6724
    Port:          <none>
    Host Port:     <none>
    Args:
      /scripts/wait-for-deps
    State:          Waiting
      Reason:       CrashLoopBackOff
    Last State:     Terminated
      Reason:       Error
      Exit Code:    1
      Started:      Thu, 21 Feb 2019 16:15:11 +1300
      Finished:     Thu, 21 Feb 2019 16:15:11 +1300
    Ready:          False
    Restart Count:  12
    Requests:
      cpu:  50m
    Environment:
      GITALY_FEATURE_DEFAULT_ON:  1
      CONFIG_TEMPLATE_DIRECTORY:  /var/opt/gitlab/templates
      CONFIG_DIRECTORY:           /srv/gitlab/config
      SIDEKIQ_CONCURRENCY:        25
      SIDEKIQ_TIMEOUT:            5
    Mounts:
      /etc/gitlab from sidekiq-secrets (ro)
      /var/opt/gitlab/templates from sidekiq-config (ro)
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-tfwcn (ro)
Containers:
  sidekiq:
    Container ID:   
    Image:          registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ce:v11.7.5
    Image ID:       
    Port:           3807/TCP
    Host Port:      0/TCP
    State:          Waiting
      Reason:       PodInitializing
    Ready:          False
    Restart Count:  0
    Requests:
      cpu:      50m
      memory:   650M
    Liveness:   exec [pgrep -f sidekiq] delay=0s timeout=1s period=10s #success=1 #failure=3
    Readiness:  exec [head -c1 /dev/random] delay=0s timeout=1s period=10s #success=1 #failure=3
    Environment:
      prometheus_multiproc_dir:   /metrics
      GITALY_FEATURE_DEFAULT_ON:  1
      CONFIG_TEMPLATE_DIRECTORY:  /var/opt/gitlab/templates
      CONFIG_DIRECTORY:           /srv/gitlab/config
      SIDEKIQ_CONCURRENCY:        25
      SIDEKIQ_TIMEOUT:            5
    Mounts:
      /etc/gitlab from sidekiq-secrets (ro)
      /etc/ssl/certs/ from etc-ssl-certs (ro)
      /metrics from sidekiq-metrics (rw)
      /srv/gitlab/INSTALLATION_TYPE from sidekiq-config (rw)
      /srv/gitlab/config/initializers/smtp_settings.rb from sidekiq-config (rw)
      /srv/gitlab/config/secrets.yml from sidekiq-secrets (rw)
      /var/opt/gitlab/templates from sidekiq-config (ro)
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-tfwcn (ro)
Conditions:
  Type              Status
  Initialized       False 
  Ready             False 
  ContainersReady   False 
  PodScheduled      True 
Volumes:
  sidekiq-metrics:
    Type:    EmptyDir (a temporary directory that shares a pod's lifetime)
    Medium:  Memory
  sidekiq-config:
    Type:               Projected (a volume that contains injected data from multiple sources)
    ConfigMapName:      gitlab-sidekiq
    ConfigMapOptional:  <nil>
    ConfigMapName:      gitlab-sidekiq-all-in-1
    ConfigMapOptional:  <nil>
  init-sidekiq-secrets:
    Type:                Projected (a volume that contains injected data from multiple sources)
    SecretName:          gitlab-rails-secret
    SecretOptionalName:  <nil>
    SecretName:          gitlab-gitaly-secret
    SecretOptionalName:  <nil>
    SecretName:          gitlab-redis-secret
    SecretOptionalName:  <nil>
    SecretName:          gitlab-postgresql-password
    SecretOptionalName:  <nil>
    SecretName:          gitlab-registry-secret
    SecretOptionalName:  <nil>
    SecretName:          gitlab-minio-secret
    SecretOptionalName:  <nil>
  sidekiq-secrets:
    Type:    EmptyDir (a temporary directory that shares a pod's lifetime)
    Medium:  Memory
  etc-ssl-certs:
    Type:    EmptyDir (a temporary directory that shares a pod's lifetime)
    Medium:  Memory
  default-token-tfwcn:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-tfwcn
    Optional:    false
QoS Class:       Burstable
Node-Selectors:  <none>
Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s
                 node.kubernetes.io/unreachable:NoExecute for 300s
Events:
  Type     Reason       Age                 From                 Message
  ----     ------       ----                ----                 -------
  Normal   Scheduled    37m                 default-scheduler    Successfully assigned gitlab/gitlab-sidekiq-all-in-1-64c87c795b-wrx22 to ci.ii.coop
  Warning  FailedMount  37m                 kubelet, ci.ii.coop  MountVolume.SetUp failed for volume "sidekiq-config" : couldn't propagate object cache: timed out waiting for the condition
  Normal   Pulled       37m                 kubelet, ci.ii.coop  Container image "registry.gitlab.com/gitlab-org/build/cng/alpine-certificates:20171114-r3" already present on machine
  Normal   Created      37m                 kubelet, ci.ii.coop  Created container
  Normal   Started      37m                 kubelet, ci.ii.coop  Started container
  Normal   Pulling      37m                 kubelet, ci.ii.coop  pulling image "busybox:latest"
  Normal   Created      37m                 kubelet, ci.ii.coop  Created container
  Normal   Pulled       37m                 kubelet, ci.ii.coop  Successfully pulled image "busybox:latest"
  Normal   Started      37m                 kubelet, ci.ii.coop  Started container
  Normal   Pulled       36m (x4 over 37m)   kubelet, ci.ii.coop  Container image "registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ce:v11.7.5" already present on machine
  Normal   Created      36m (x4 over 37m)   kubelet, ci.ii.coop  Created container
  Normal   Started      36m (x4 over 37m)   kubelet, ci.ii.coop  Started container
  Warning  BackOff      2m (x163 over 37m)  kubelet, ci.ii.coop  Back-off restarting failed container
#+END_EXAMPLE

  #+NAME: Init Container Statuses of gitlab sidekiq
  #+BEGIN_SRC shell :wrap "SRC json"
(
  kubectl get pod \
    -l app=sidekiq \
    --namespace=gitlab \
    -o json \
  | jq -M '.items[0].status.initContainerStatuses[] | select(.ready==false)'
) 2>&1
echo // errors should appear above this
#
  #+END_SRC

  #+RESULTS: Init Container Statuses of gitlab sidekiq
  #+BEGIN_SRC json
  {
    "containerID": "docker://2ef97902897033b1d7efcfe955c52f6782db32851ba710db7c9e265a917f48c3",
    "image": "registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ce:v11.7.5",
    "imageID": "docker-pullable://registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ce@sha256:df2c7329c885f002a1e941e08838736e6714829d80460eb59c05f9b4066e6724",
    "lastState": {
      "terminated": {
        "containerID": "docker://2ef97902897033b1d7efcfe955c52f6782db32851ba710db7c9e265a917f48c3",
        "exitCode": 1,
        "finishedAt": "2019-02-21T03:10:05Z",
        "reason": "Error",
        "startedAt": "2019-02-21T03:10:05Z"
      }
    },
    "name": "dependencies",
    "ready": false,
    "restartCount": 11,
    "state": {
      "waiting": {
        "message": "Back-off 5m0s restarting failed container=dependencies pod=gitlab-sidekiq-all-in-1-64c87c795b-wrx22_gitlab(c2d93935-3581-11e9-bfc2-98039b302386)",
        "reason": "CrashLoopBackOff"
      }
    }
  }
  // errors should appear above this
  #+END_SRC

  #+NAME: Status Condition of gitlab sidekiq
  #+BEGIN_SRC shell :wrap "SRC json"
(
  kubectl get pod \
    -l app=sidekiq \
    --namespace=gitlab \
    -o json \
  | jq -M '.items[0].status.conditions'
) 2>&1
echo // errors should appear above this
#[] | select(.type=="Ready")'
  #+END_SRC

  #+RESULTS: Status Condition of gitlab sidekiq
  #+BEGIN_SRC json
  [
    {
      "lastProbeTime": null,
      "lastTransitionTime": "2019-02-21T02:38:24Z",
      "message": "containers with incomplete status: [dependencies]",
      "reason": "ContainersNotInitialized",
      "status": "False",
      "type": "Initialized"
    },
    {
      "lastProbeTime": null,
      "lastTransitionTime": "2019-02-21T02:38:24Z",
      "message": "containers with unready status: [sidekiq]",
      "reason": "ContainersNotReady",
      "status": "False",
      "type": "Ready"
    },
    {
      "lastProbeTime": null,
      "lastTransitionTime": "2019-02-21T02:38:24Z",
      "message": "containers with unready status: [sidekiq]",
      "reason": "ContainersNotReady",
      "status": "False",
      "type": "ContainersReady"
    },
    {
      "lastProbeTime": null,
      "lastTransitionTime": "2019-02-21T02:38:24Z",
      "status": "True",
      "type": "PodScheduled"
    }
  ]
  #+END_SRC

  #+NAME: Get logs for sidekiq init certificates container
  #+BEGIN_SRC shell
    (
      kubectl logs \
          $(kubectl get pod \
            -l app=sidekiq \
            --namespace=gitlab \
            -o name )\
       --namespace=gitlab \
       -c certificates
    ) 2>&1
  #+END_SRC

  #+RESULTS: Get logs for sidekiq init certificates container
  #+BEGIN_EXAMPLE :noeval t
  rm: can't remove '/etc/ssl/certs/*': No such file or directory
  WARNING: ca-certificates.crt does not contain exactly one certificate or CRL: skipping
  #+END_EXAMPLE

  #+NAME: Get logs for sidekiq init configure container
  #+BEGIN_SRC shell
    (
      kubectl logs \
          $(kubectl get pod \
            -l app=sidekiq \
            --namespace=gitlab \
            -o name )\
       --namespace=gitlab \
       -c configure
    ) 2>&1
  #+END_SRC

  #+RESULTS: Get logs for sidekiq init configure container
  #+BEGIN_EXAMPLE :noeval t
  '/init-secrets/redis/./password' -> '/sidekiq-secrets/redis/./password'
  '/init-secrets/redis/.' -> '/sidekiq-secrets/redis/.'
  '/init-secrets/gitaly/./gitaly_token' -> '/sidekiq-secrets/gitaly/./gitaly_token'
  '/init-secrets/gitaly/.' -> '/sidekiq-secrets/gitaly/.'
  '/init-secrets/registry/./gitlab-registry.key' -> '/sidekiq-secrets/registry/./gitlab-registry.key'
  '/init-secrets/registry/.' -> '/sidekiq-secrets/registry/.'
  '/init-secrets/postgres/./psql-password' -> '/sidekiq-secrets/postgres/./psql-password'
  '/init-secrets/postgres/.' -> '/sidekiq-secrets/postgres/.'
  '/init-secrets/rails-secrets/./secrets.yml' -> '/sidekiq-secrets/rails-secrets/./secrets.yml'
  '/init-secrets/rails-secrets/.' -> '/sidekiq-secrets/rails-secrets/.'
  '/init-secrets/minio/./secretkey' -> '/sidekiq-secrets/minio/./secretkey'
  '/init-secrets/minio/./accesskey' -> '/sidekiq-secrets/minio/./accesskey'
  '/init-secrets/minio/.' -> '/sidekiq-secrets/minio/.'
  #+END_EXAMPLE


  #+NAME: Get logs for sidekiq init dependencies container
  #+BEGIN_SRC shell
    (
      kubectl logs \
          $(kubectl get pod \
            -l app=sidekiq \
            --namespace=gitlab \
            -o name )\
       --namespace=gitlab \
       -c dependencies
    ) 2>&1
  #+END_SRC

  #+RESULTS: Get logs for sidekiq init dependencies container
  #+BEGIN_EXAMPLE :noeval t
  + /scripts/set-config /var/opt/gitlab/templates /srv/gitlab/config
  /usr/lib/ruby/2.4.0/psych.rb:472:in `initialize': No such file or directory @ rb_sysopen - /srv/gitlab/config/sidekiq_queues.yml (Errno::ENOENT)
    from /usr/lib/ruby/2.4.0/psych.rb:472:in `open'
    from /usr/lib/ruby/2.4.0/psych.rb:472:in `load_file'
    from (erb):1:in `<main>'
    from /usr/lib/ruby/2.4.0/erb.rb:896:in `eval'
    from /usr/lib/ruby/2.4.0/erb.rb:896:in `result'
    from /scripts/set-config:22:in `block in <main>'
    from /scripts/set-config:18:in `each'
    from /scripts/set-config:18:in `<main>'
  Begin parsing .erb files from /var/opt/gitlab/templates
  Writing /srv/gitlab/config/resque.yml
  Writing /srv/gitlab/config/gitlab.yml
  Writing /srv/gitlab/config/database.yml
  Writing /srv/gitlab/config/sidekiq_queues.yml
  #+END_EXAMPLE

#+BEGIN_SRC tmate

#+END_SRC

* Footnotes
# Local Variables:
# eval: (set (make-local-variable 'ssh-user-host) "root@139.178.88.146")
# eval: (set (make-local-variable 'org-file-dir) (file-name-directory buffer-file-name))
# eval: (set (make-local-variable 'user-buffer) (concat user-login-name "." (file-name-base buffer-file-name)))
# eval: (set (make-local-variable 'tmpdir) (make-temp-file (concat "/dev/shm/" user-buffer "-") t))
# eval: (set (make-local-variable 'socket) (concat "/tmp/" user-buffer ".iisocket"))
# eval: (set (make-local-variable 'select-enable-clipboard) t)
# eval: (set (make-local-variable 'select-enable-primary) t)
# eval: (set (make-local-variable 'start-tmate-command) (concat "tmate -S " socket " new-session -A -s " user-login-name " -n main \\\"tmate wait tmate-ready \\&\\& sleep 2 \\&\\& tmate display -p \'\\\#{tmate_ssh}\\ \\\\#\\ " user-buffer "\\ \\\\#\\ \\\#{tmate_web}\' \\| xclip -i -sel p -f \\| xclip -i -sel c \\&\\& bash --login\\\""))
# eval: (xclip-mode 1) 
# eval: (gui-select-text (concat "rm -i " socket "; ssh -tAX " ssh-user-host " -L " socket ":" socket " " start-tmate-command))
# eval: (xclip-mode 1) 
# org-babel-tmate-session-prefix: ""
# org-babel-tmate-default-window-name: "main"
# org-confirm-babel-evaluate: nil
# org-use-property-inheritance: t
# End:
