#+TITLE: Pyasn Lookup
Link to this document https://github.com/ii/org/blob/main/research/pyasn-lookup.org#lets-add-asn-results-to-the-dictionary
This is an investigation of https://github.com/hadiasghari/pyasn
Desired outcomes will be to parse the output from this library to tie each asn to it associated start and end ip ints so we can range over them to find customer asns
This document only concerns itself with generating a asn to ip-range relationsip map
* Clone repo
#+BEGIN_SRC tmate :window pyasn
git clone https://github.com/hadiasghari/pyasn.git
#+END_SRC
* Install pyasn
#+BEGIN_SRC tmate :window pyasn
pip install pyasn
#+END_SRC
#+BEGIN_SRC python tmate :window python
#print('Please wait')
return 'A line of text.\n'.rstrip()
#+END_SRC

#+RESULTS:
#+begin_src python
A line of text.
#+end_src
* Download and process the latest rib file
You can view the full list on ftp://archive.routeviews.org//bgpdata/2021.05/RIBS/
obviosly adjust for date
to get the latest file simply run:
pip installed the scripts in .local so I am adding it to my path
TODO: Decide how we want to reference these scripts
#+BEGIN_SRC shell :dir (concat (getenv "HOME") "/foo")
export PATH="/home/ii/.local/bin/:$PATH"
pyasn_util_download.py --latest
#+END_SRC

#+RESULTS:
#+begin_example
Connecting to ftp://archive.routeviews.org
Finding most recent archive in /bgpdata/2021.06/RIBS ...
Finding most recent archive in /bgpdata/2021.05/RIBS ...
Downloading ftp://archive.routeviews.org//bgpdata/2021.05/RIBS/rib.20210531.2200.bz2
Download complete.
#+end_example

* Process rib file so we can transform it into a local data file
#+BEGIN_SRC shell :dir (concat (getenv "HOME") "/foo")
ls -al | grep rib
#+END_SRC

#+RESULTS:
#+begin_example
-rw-r--r--  1 ii   ii   124276057 Jun  1 11:35 rib.20210531.2200.bz2
#+end_example

#+BEGIN_SRC shell :dir (concat (getenv "HOME") "/foo")
export PATH="/home/ii/.local/bin/:$PATH"
pyasn_util_convert.py --single rib.20210531.2200.bz2 ipasn_20140531_1.dat
#+END_SRC

#+RESULTS:
#+begin_example
IPASN database saved (923124 IPV4 + 0 IPV6 prefixes)
#+end_example

#+BEGIN_SRC shell :dir (concat (getenv "HOME") "/foo")
ls -alrt | tail -3
#+END_SRC

#+RESULTS:
#+begin_example
-rw-r--r--  1 ii   ii   124276057 Jun  1 11:35 rib.20210531.2200.bz2
-rw-r--r--  1 ii   ii    19939342 Jun  1 11:42 ipasn_20140531_1.dat
#+end_example

* Use pyasn to parse the data file
#+BEGIN_SRC python :dir (concat (getenv "HOME") "/foo")
import pyasn
asndb = pyasn.pyasn('ipasn_20140531_1.dat')
return asndb.get_as_prefixes(1128)
#+END_SRC

#+RESULTS:
#+begin_src python
{'131.180.0.0/16', '130.161.0.0/16', '145.94.0.0/16'}
#+end_src

* Plan flow that will network ranges for all asns
GOAL:
I want a script that takes in asns and .dat file and returns a list of asns with associated network ranges

I decided restrict this just to pyasn in python,
I will deal with data and other external seperateley
- Start with file that has all asns. Can get them from:
  - https://bgp.potaroo.net/cidr/autnums.html has been a good resource
  - Look what pyasn can produce
  - Other? There is a lot of them out there, I struggled to find a complete one, happy to hear suggestions.
- Import pyasn
- Read in asnFile, set variable to the resulting array
- Set db string
- Range through array, for each element run get_as_prefixes()
- Store result in a dictionary(?),
  - the object has a key/value of asn/ip range.
  - there are multiple ip ranges per asn
- When all the data has been appended to the dictionary write it to file as a csv
** Very nice siscinct summary from zz
- i can reference the variable and return the whole array
- i can reference an index of this variable and return one item of the array
- i can loop through an array and do something
- i can loop through an array and add each item to a dict
- i can write this dict to a file
- i can open the csv.

** Dictionary struct
  The dictionary will look something like this:
  #+BEGIN_EXAMPLE
{
  '6554': [
   - 123412,
  - 123133,
  - 123231
  ]
}
  #+END_EXAMPLE
* Start with reading file into variable
Printing the resulting dictionary
#+BEGIN_SRC python :dir (concat (getenv "HOME") "/foo") :results output
print ('start')
File_object = open(r"/home/ii/foo/asnNumbersOnlyTail10.txt","r+")
asnNum = File_object.readlines()
print (asnNum)
dictOfWords = {i : 5 for i in asnNum}
print(dictOfWords)
print ('end')
#+END_SRC

#+RESULTS:
#+begin_src python
start
['399716\n', '399717\n', '399718\n', '399719\n', '399720\n', '399721\n', '399722\n', '399723\n', '399724\n', '401308\n']
{'399716\n': 5, '399717\n': 5, '399718\n': 5, '399719\n': 5, '399720\n': 5, '399721\n': 5, '399722\n': 5, '399723\n': 5, '399724\n': 5, '401308\n': 5}
end
#+end_src

* Lets add asn results to the dictionary
Printing the resulting dictionary
#+BEGIN_SRC python :dir (concat (getenv "HOME") "/foo") :results output
## Import pyasn
import pyasn
print('start')
## Open asnNumFile and read
asnFile = "/home/ii/foo/asnNumbersOnlyTail10.txt"
asnNum = [line.rstrip() for line in open(asnFile, "r+")]
print(asnNum)
## assign our dat file connection string
asndb = pyasn.pyasn('ipasn_20140531_1.dat')
## Declare empty dictionary
destDict = {}
## Loop through list of asns
for singleAsn in asnNum:
    ## Set asn to int
    print("val of x: ", singleAsn)
    ## Go look up the asn subnets (prefixes)
    subnets = asndb.get_as_prefixes(singleAsn)
    print("This is x and it's prefix: ", singleAsn, asndb.get_as_prefixes(singleAsn))
    ## Add subnets with
    originAsnDict = {sbnets : singleAsn for sbnets in subnets}
    destDict.update(originAsnDict)
    print("Value of destDict", destDict)
print("dict of words: ", originAsnDict)
print("Print final dictionary: ", destDict)
print("last subnets returned: ", subnets)
print('end')
#+END_SRC

#+RESULTS:
#+begin_src python
start
['399549', '399553', '399561', '399564', '399593', '399588', '399587']
val of x:  399549
This is x and it's prefix:  399549 {'216.87.86.0/24', '216.87.87.0/24'}
Value of destDict {'216.87.86.0/24': '399549', '216.87.87.0/24': '399549'}
val of x:  399553
This is x and it's prefix:  399553 {'108.165.228.0/22'}
Value of destDict {'216.87.86.0/24': '399549', '216.87.87.0/24': '399549', '108.165.228.0/22': '399553'}
val of x:  399561
This is x and it's prefix:  399561 {'163.123.163.0/24'}
Value of destDict {'216.87.86.0/24': '399549', '216.87.87.0/24': '399549', '108.165.228.0/22': '399553', '163.123.163.0/24': '399561'}
val of x:  399564
This is x and it's prefix:  399564 {'205.178.171.0/24'}
Value of destDict {'216.87.86.0/24': '399549', '216.87.87.0/24': '399549', '108.165.228.0/22': '399553', '163.123.163.0/24': '399561', '205.178.171.0/24': '399564'}
val of x:  399593
This is x and it's prefix:  399593 {'205.236.101.0/24'}
Value of destDict {'216.87.86.0/24': '399549', '216.87.87.0/24': '399549', '108.165.228.0/22': '399553', '163.123.163.0/24': '399561', '205.178.171.0/24': '399564', '205.236.101.0/24': '399593'}
val of x:  399588
This is x and it's prefix:  399588 {'172.110.143.0/24'}
Value of destDict {'216.87.86.0/24': '399549', '216.87.87.0/24': '399549', '108.165.228.0/22': '399553', '163.123.163.0/24': '399561', '205.178.171.0/24': '399564', '205.236.101.0/24': '399593', '172.110.143.0/24': '399588'}
val of x:  399587
This is x and it's prefix:  399587 {'193.3.54.0/24', '193.8.186.0/24', '193.8.187.0/24', '193.8.184.0/24', '193.8.185.0/24'}
Value of destDict {'216.87.86.0/24': '399549', '216.87.87.0/24': '399549', '108.165.228.0/22': '399553', '163.123.163.0/24': '399561', '205.178.171.0/24': '399564', '205.236.101.0/24': '399593', '172.110.143.0/24': '399588', '193.3.54.0/24': '399587', '193.8.186.0/24': '399587', '193.8.187.0/24': '399587', '193.8.184.0/24': '399587', '193.8.185.0/24': '399587'}
dict of words:  {'193.3.54.0/24': '399587', '193.8.186.0/24': '399587', '193.8.187.0/24': '399587', '193.8.184.0/24': '399587', '193.8.185.0/24': '399587'}
Print final dictionary:  {'216.87.86.0/24': '399549', '216.87.87.0/24': '399549', '108.165.228.0/22': '399553', '163.123.163.0/24': '399561', '205.178.171.0/24': '399564', '205.236.101.0/24': '399593', '172.110.143.0/24': '399588', '193.3.54.0/24': '399587', '193.8.186.0/24': '399587', '193.8.187.0/24': '399587', '193.8.184.0/24': '399587', '193.8.185.0/24': '399587'}
last subnets returned:  {'193.3.54.0/24', '193.8.186.0/24', '193.8.187.0/24', '193.8.184.0/24', '193.8.185.0/24'}
end
#+end_src

* Lets go output the results to a csv
** sample code

#+BEGIN_SRC python :dir (concat (getenv "HOME") "/foo") :results output
import csv
a_file = open("sample.csv", "w")
a_dict = {"a": 1, "b": 2}

writer = csv.writer(a_file)
for key, value in a_dict.items():
    writer.writerow([key, value])

a_file.close()
#+END_SRC

#+RESULTS:
#+begin_src python
a,1
b,2
#+end_src

#+BEGIN_SRC python :dir (concat (getenv "HOME") "/foo") :results output
## Import pyasn and csv
import pyasn
import csv
# Lets go!
print('start')
## Open asnNumFile and read
asnFile = "/home/ii/foo/asnNumbersOnlyTail10.txt"
asnNum = [line.rstrip() for line in open(asnFile, "r+")]
# print(asnNum)
## assign our dat file connection string
asndb = pyasn.pyasn('ipasn_20140531_1.dat')
## Declare empty dictionary
destDict = {}
## Loop through list of asns
for singleAsn in asnNum:
    ## Set asn to int
    ## print("val of x: ", singleAsn)
    ## Go look up the asn subnets (prefixes)
    subnets = asndb.get_as_prefixes(singleAsn)
    ## print("This is x and it's prefix: ", singleAsn, asndb.get_as_prefixes(singleAsn))
    ## Add subnets with
    originAsnDict = {sbnets : singleAsn for sbnets in subnets}
    destDict.update(originAsnDict)
    ## print("Value of destDict", destDict)
# print("dict of asn/net-ranges from the las loop: ", originAsnDict)
print("Print final dictionary: ", destDict)
# print("last subnets returned: ", subnets)
# Open file for writing
resultsCsv = open("pyAsnOutput.csv", "w")
# write to csv
writer = csv.writer(resultsCsv)
for key, value in destDict.items():
    writer.writerow([key, value])
## winner winner chicken dinner
print('end')
#+END_SRC

#+RESULTS:
#+begin_src python
start
Print final dictionary:  {'216.87.86.0/24': '399549', '216.87.87.0/24': '399549', '108.165.228.0/22': '399553', '163.123.163.0/24': '399561', '205.178.171.0/24': '399564', '205.236.101.0/24': '399593', '172.110.143.0/24': '399588', '193.8.184.0/24': '399587', '193.3.54.0/24': '399587', '193.8.185.0/24': '399587', '193.8.186.0/24': '399587', '193.8.187.0/24': '399587'}
end
#+end_src
