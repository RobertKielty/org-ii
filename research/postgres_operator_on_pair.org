#+TITLE: Postgres Operator On Pair
Stand up postgres operator on multi node cluster
Work based on https://github.com/zalando/postgres-operator
* yaml needed:
#+begin_src yaml :tangle /tmp/pg_db_operator.yaml :results silent
apiVersion: "acid.zalan.do/v1"
kind: postgresql
metadata:
  name: ii-ii
spec:
  enableConnectionPooler: true
  teamId: "ii"
  volume:
    size: 20Gi
  numberOfInstances: 3
  users:
    ii: # database owner
      - superuser
      - createdb
  databases:
    ii: ii # dbname: owner
  postgresql:
    version: "12"
#+end_src


#+begin_src yaml :tangle /tmp/pg_chart_operator.yaml :results silent
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  name: postgres-operator
  namespace: postgres-operator
spec:
  releaseName: postgres-operator
  chart:
    git: https://github.com/zalando/postgres-operator.git
    ref: v1.6.1
    path: charts/postgres-operator
    values:
      configKubernetes:
        enable_pod_antiaffinity: "true"
#+end_src

* Create the postgres-operator ns
#+begin_src shell
kubectl get ns -A
#+end_src

#+begin_src shell
kubectl create ns postgres-operator
#+end_src

* Apply the chart
#+begin_src shell
kubectl apply -f /tmp/pg_chart_operator.yaml
#+end_src

#+RESULTS:
#+begin_example
helmrelease.helm.fluxcd.io/postgres-operator created
#+end_example

#+begin_src shell
kubectl apply -f /tmp/pg_db_operator.yaml
#+end_src

#+RESULTS:
#+begin_example
postgresql.acid.zalan.do/ii-ii created
#+end_example

* Create shell function to connect to psql in pg-operator
THis can be used and tangled out, I ended up just using the lines to get the ip and password
#+begin_src yaml :tangle /tmp/psql-shell.sh :results silent
#!/bin/bash

if [ "$KUBECTL_PSQL_DEBUG" = "true" ]; then
  set -x
fi

function requireNonEmpty {
    if [ -z "$2" ]; then
        echo "error: '$1' is a required field" > /dev/stderr
        exit 1
    fi
}

if [ $# -eq 0 ]; then
    echo "kubectl-psql

usage: kubectl psql -n NAMESPACE POSTGRES_OPERATOR_DB"
    exit 0
fi

NAMESPACE="default"
args=()
while [ $# -gt 0 ]; do
  key="$1"

  case $key in
  -n | --namespace)
    NAMESPACE="$2"
    shift
    shift
    ;;
  ,*)
    args+=($1)
    shift
    ;;
  esac
done

NAME=${args[0]}
requireNonEmpty "name" "$NAME"
DATABASE=${args[1]}

POSTGRESQL_DATABASES=$(kubectl -n $NAMESPACE get postgresql $NAME -o=jsonpath='{.spec.databases}')
DATABASE=${DATABASE:-$(echo $POSTGRESQL_DATABASES | jq -r 'keys[0]')}
USERNAME=$(echo $POSTGRESQL_DATABASES | jq -r ".${DATABASE}")
kubectl -n bernokl get secret ii.ii-ii.credentials.postgresql.acid.zalan.do -o=jsonpath='{.data.password}' | base64 --decode
SECRET_NAME=$USERNAME.$NAME.
SECRET=$(kubectl -n $NAMESPACE get secret $SECRET_NAME -o=jsonpath='{.data.password}' | base64 --decode)
kubectl -n $NAMESPACE exec -it deployment/$NAME-pooler -- psql postgresql://$USERNAME:$SECRET@$NAME-pooler/$DATABASE "$@"
#+end_src

Lets go get the password
#+begin_src shell
kubectl -n bernokl get secret ii.ii-ii.credentials.postgresql.acid.zalan.do -o=jsonpath='{.data.password}' | base64 --decode
#+end_src

#+RESULTS:
#+begin_example
8Av3ugD8Pujwug7qwwUFhQRplehVyrwtfDwGAFHHihQLayJyO9lCjoqIi79HABqs
#+end_example

Lets go get our host ip ( it is the one that ends with ii-pooler )
#+begin_src shell
kubectl -n bernokl get svc
#+end_src

#+RESULTS:
#+begin_example
NAME                         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE
ii-ii                        ClusterIP   10.104.170.68   <none>        5432/TCP   7m21s
ii-ii-config                 ClusterIP   None            <none>        <none>     6m43s
ii-ii-pooler                 ClusterIP   10.106.73.227   <none>        5432/TCP   6m27s
ii-ii-repl                   ClusterIP   10.105.10.78    <none>        5432/TCP   7m20s
public-html-go-http-server   ClusterIP   10.102.249.43   <none>        8080/TCP   79m
#+end_example

* Connect to psql
For this connection I used:
user: ii
db: ii
pw: [one displayed above]
how: ii-ii-pooler
#+BEGIN_SRC sql-mode
SELECT schemaname, tablename FROM pg_catalog.pg_tables WHERE schemaname != 'pg_catalog' AND schemaname != 'information_schema';
#+END_SRC

#+RESULTS:
#+begin_SRC example
 schemaname | tablename
------------+-----------
(0 rows)

#+end_SRC
